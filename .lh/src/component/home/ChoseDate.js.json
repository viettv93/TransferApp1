{
    "sourceFile": "src/component/home/ChoseDate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1647270559863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1647270629117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,65 @@\n import React from 'react'\r\n import { View } from 'react-native'\r\n import fonts from '../../utils/index'\r\n+import { Calendar, CalendarList, Agenda } from 'react-native-calendars'\r\n \r\n-\r\n const ChoseDate = () => {\r\n     return (\r\n-        <View style={{flex: 1, backgroundColor :fonts.default_color}}>\r\n-\r\n+        <View style={{ flex: 1, backgroundColor: fonts.default_color }}>\r\n+            <Calendar\r\n+                // Initially visible month. Default = now\r\n+                current={'2012-03-01'}\r\n+                // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n+                minDate={'2012-05-10'}\r\n+                // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n+                maxDate={'2012-05-30'}\r\n+                // Handler which gets executed on day press. Default = undefined\r\n+                onDayPress={day => {\r\n+                    console.log('selected day', day);\r\n+                }}\r\n+                // Handler which gets executed on day long press. Default = undefined\r\n+                onDayLongPress={day => {\r\n+                    console.log('selected day', day);\r\n+                }}\r\n+                // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n+                monthFormat={'yyyy MM'}\r\n+                // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n+                onMonthChange={month => {\r\n+                    console.log('month changed', month);\r\n+                }}\r\n+                // Hide month navigation arrows. Default = false\r\n+                hideArrows={true}\r\n+                // Replace default arrows with custom ones (direction can be 'left' or 'right')\r\n+                renderArrow={direction => <Arrow />}\r\n+                // Do not show days of other months in month page. Default = false\r\n+                hideExtraDays={true}\r\n+                // If hideArrows = false and hideExtraDays = false do not switch month when tapping on greyed out\r\n+                // day from another month that is visible in calendar page. Default = false\r\n+                disableMonthChange={true}\r\n+                // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday\r\n+                firstDay={1}\r\n+                // Hide day names. Default = false\r\n+                hideDayNames={true}\r\n+                // Show week numbers to the left. Default = false\r\n+                showWeekNumbers={true}\r\n+                // Handler which gets executed when press arrow icon left. It receive a callback can go back month\r\n+                onPressArrowLeft={subtractMonth => subtractMonth()}\r\n+                // Handler which gets executed when press arrow icon right. It receive a callback can go next month\r\n+                onPressArrowRight={addMonth => addMonth()}\r\n+                // Disable left arrow. Default = false\r\n+                disableArrowLeft={true}\r\n+                // Disable right arrow. Default = false\r\n+                disableArrowRight={true}\r\n+                // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\r\n+                disableAllTouchEventsForDisabledDays={true}\r\n+                // Replace default month and year title with custom one. the function receive a date as parameter\r\n+                renderHeader={date => {\r\n+                    /*Return JSX*/\r\n+                }}\r\n+                // Enable the option to swipe between months. Default = false\r\n+                enableSwipeMonths={true}\r\n+            />\r\n         </View>\r\n     )\r\n }\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647270785965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,13 @@\n     return (\r\n         <View style={{ flex: 1, backgroundColor: fonts.default_color }}>\r\n             <Calendar\r\n                 // Initially visible month. Default = now\r\n-                current={'2012-03-01'}\r\n+                current={'2022-03-01'}\r\n                 // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n-                minDate={'2012-05-10'}\r\n+                minDate={'2022-01-01'}\r\n                 // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n-                maxDate={'2012-05-30'}\r\n+                maxDate={'2022-12-31'}\r\n                 // Handler which gets executed on day press. Default = undefined\r\n                 onDayPress={day => {\r\n                     console.log('selected day', day);\r\n                 }}\r\n"
                },
                {
                    "date": 1647271395578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n import React from 'react'\r\n import { View } from 'react-native'\r\n import fonts from '../../utils/index'\r\n import { Calendar, CalendarList, Agenda } from 'react-native-calendars'\r\n+import { LocaleConfig } from 'react-native-calendars'\r\n \r\n+\r\n const ChoseDate = () => {\r\n     return (\r\n         <View style={{ flex: 1, backgroundColor: fonts.default_color }}>\r\n             <Calendar\r\n@@ -58,8 +60,18 @@\n                 }}\r\n                 // Enable the option to swipe between months. Default = false\r\n                 enableSwipeMonths={true}\r\n             />\r\n+            <CalendarList\r\n+                onVisibleMonthsChange={(months) => {console.log('now these months are visible', months);}}\r\n+                horizontal={true}\r\n+                // Enable paging on horizontal, default = false\r\n+                pagingEnabled={true}\r\n+                // Set custom calendarWidth.\r\n+                calendarWidth={320}\r\n+                showScrollIndicator={true}\r\n+            \r\n+/>\r\n         </View>\r\n     )\r\n }\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647271431161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,61 +7,9 @@\n \r\n const ChoseDate = () => {\r\n     return (\r\n         <View style={{ flex: 1, backgroundColor: fonts.default_color }}>\r\n-            <Calendar\r\n-                // Initially visible month. Default = now\r\n-                current={'2022-03-01'}\r\n-                // Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined\r\n-                minDate={'2022-01-01'}\r\n-                // Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined\r\n-                maxDate={'2022-12-31'}\r\n-                // Handler which gets executed on day press. Default = undefined\r\n-                onDayPress={day => {\r\n-                    console.log('selected day', day);\r\n-                }}\r\n-                // Handler which gets executed on day long press. Default = undefined\r\n-                onDayLongPress={day => {\r\n-                    console.log('selected day', day);\r\n-                }}\r\n-                // Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting\r\n-                monthFormat={'yyyy MM'}\r\n-                // Handler which gets executed when visible month changes in calendar. Default = undefined\r\n-                onMonthChange={month => {\r\n-                    console.log('month changed', month);\r\n-                }}\r\n-                // Hide month navigation arrows. Default = false\r\n-                hideArrows={true}\r\n-                // Replace default arrows with custom ones (direction can be 'left' or 'right')\r\n-                renderArrow={direction => <Arrow />}\r\n-                // Do not show days of other months in month page. Default = false\r\n-                hideExtraDays={true}\r\n-                // If hideArrows = false and hideExtraDays = false do not switch month when tapping on greyed out\r\n-                // day from another month that is visible in calendar page. Default = false\r\n-                disableMonthChange={true}\r\n-                // If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday\r\n-                firstDay={1}\r\n-                // Hide day names. Default = false\r\n-                hideDayNames={true}\r\n-                // Show week numbers to the left. Default = false\r\n-                showWeekNumbers={true}\r\n-                // Handler which gets executed when press arrow icon left. It receive a callback can go back month\r\n-                onPressArrowLeft={subtractMonth => subtractMonth()}\r\n-                // Handler which gets executed when press arrow icon right. It receive a callback can go next month\r\n-                onPressArrowRight={addMonth => addMonth()}\r\n-                // Disable left arrow. Default = false\r\n-                disableArrowLeft={true}\r\n-                // Disable right arrow. Default = false\r\n-                disableArrowRight={true}\r\n-                // Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates\r\n-                disableAllTouchEventsForDisabledDays={true}\r\n-                // Replace default month and year title with custom one. the function receive a date as parameter\r\n-                renderHeader={date => {\r\n-                    /*Return JSX*/\r\n-                }}\r\n-                // Enable the option to swipe between months. Default = false\r\n-                enableSwipeMonths={true}\r\n-            />\r\n+            \r\n             <CalendarList\r\n                 onVisibleMonthsChange={(months) => {console.log('now these months are visible', months);}}\r\n                 horizontal={true}\r\n                 // Enable paging on horizontal, default = false\r\n"
                },
                {
                    "date": 1647271445735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n                 horizontal={true}\r\n                 // Enable paging on horizontal, default = false\r\n                 pagingEnabled={true}\r\n                 // Set custom calendarWidth.\r\n-                calendarWidth={320}\r\n+                calendarWidth={300}\r\n                 showScrollIndicator={true}\r\n             \r\n />\r\n         </View>\r\n"
                },
                {
                    "date": 1647271461926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n                 horizontal={true}\r\n                 // Enable paging on horizontal, default = false\r\n                 pagingEnabled={true}\r\n                 // Set custom calendarWidth.\r\n-                calendarWidth={300}\r\n+                calendarWidth={450}\r\n                 showScrollIndicator={true}\r\n             \r\n />\r\n         </View>\r\n"
                },
                {
                    "date": 1647271471833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n                 horizontal={true}\r\n                 // Enable paging on horizontal, default = false\r\n                 pagingEnabled={true}\r\n                 // Set custom calendarWidth.\r\n-                calendarWidth={450}\r\n+                calendarWidth={420}\r\n                 showScrollIndicator={true}\r\n             \r\n />\r\n         </View>\r\n"
                },
                {
                    "date": 1647271550524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,10 @@\n                 pagingEnabled={true}\r\n                 // Set custom calendarWidth.\r\n                 calendarWidth={420}\r\n                 showScrollIndicator={true}\r\n-            \r\n+                pastScrollRange = { 50 }\r\n+                futureScrollRange = { 50 }\r\n />\r\n         </View>\r\n     )\r\n }\r\n"
                },
                {
                    "date": 1647274629752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,115 @@\n-import React from 'react'\r\n-import { View } from 'react-native'\r\n-import fonts from '../../utils/index'\r\n-import { Calendar, CalendarList, Agenda } from 'react-native-calendars'\r\n-import { LocaleConfig } from 'react-native-calendars'\r\n+import React, { useState, Fragment, useCallback, useMemo } from 'react';\r\n+import { StyleSheet, View, ScrollView, Text, TouchableOpacity } from 'react-native';\r\n+import { Calendar, CalendarProps } from 'react-native-calendars';\r\n \r\n \r\n+const INITIAL_DATE = '2022-03-15';\r\n+\r\n const ChoseDate = () => {\r\n-    return (\r\n-        <View style={{ flex: 1, backgroundColor: fonts.default_color }}>\r\n-            \r\n-            <CalendarList\r\n-                onVisibleMonthsChange={(months) => {console.log('now these months are visible', months);}}\r\n-                horizontal={true}\r\n-                // Enable paging on horizontal, default = false\r\n-                pagingEnabled={true}\r\n-                // Set custom calendarWidth.\r\n-                calendarWidth={420}\r\n-                showScrollIndicator={true}\r\n-                pastScrollRange = { 50 }\r\n-                futureScrollRange = { 50 }\r\n-/>\r\n-        </View>\r\n-    )\r\n-}\r\n+    const [selected, setSelected] = useState(INITIAL_DATE);\r\n+\r\n+    const onDayPress = useCallback(day => {\r\n+        setSelected(day.dateString);\r\n+    }, []);\r\n+\r\n+    const marked = useMemo(() => {\r\n+        return {\r\n+            [selected]: {\r\n+                selected: true,\r\n+                disableTouchEvent: true,\r\n+                selectedColor: 'orange',\r\n+                selectedTextColor: 'red'\r\n+            }\r\n+        };\r\n+    }, [selected]);\r\n+\r\n+    const renderCalendarWithSelectableDate = () => {\r\n+        return (\r\n+            <Fragment>\r\n+                <Text style={styles.text}>Calendar with selectable date</Text>\r\n+                <Calendar\r\n+                    enableSwipeMonths\r\n+                    current={INITIAL_DATE}\r\n+                    style={styles.calendar}\r\n+                    onDayPress={onDayPress}\r\n+                    markedDates={marked}\r\n+                />\r\n+            </Fragment>\r\n+        );\r\n+    }\r\n+    const renderCalendarWithCustomHeaderTitle = () => {\r\n+        const [selectedValue, setSelectedValue] = useState(new Date());\r\n+    \r\n+        const getNewSelectedDate = useCallback(\r\n+          (date, shouldAdd) => {\r\n+            const newMonth = new Date(date).getMonth();\r\n+            const month = shouldAdd ? newMonth + 1 : newMonth - 1;\r\n+            const newDate = new Date(selectedValue.setMonth(month));\r\n+            const newSelected = new Date(newDate.setDate(1));\r\n+            return newSelected;\r\n+          },\r\n+          [selectedValue]\r\n+        );\r\n+        const onPressArrowLeft = useCallback(\r\n+          (subtract, month) => {\r\n+            const newDate = getNewSelectedDate(month, false);\r\n+            setSelectedValue(newDate);\r\n+            subtract();\r\n+          },\r\n+          [getNewSelectedDate]\r\n+        );\r\n+      \r\n+        const onPressArrowRight = useCallback(\r\n+          (add, month) => {\r\n+            const newDate = getNewSelectedDate(month, true);\r\n+            setSelectedValue(newDate);\r\n+            add();\r\n+          },\r\n+          [getNewSelectedDate]\r\n+        );\r\n+    \r\n+        const CustomHeaderTitle = (\r\n+          <TouchableOpacity style={styles.customTitleContainer} onPress={() => console.warn('Tapped!')}>\r\n+            <Text style={styles.customTitle}>{selectedValue.getMonth() + 1}-{selectedValue.getFullYear()}</Text>\r\n+          </TouchableOpacity>\r\n+        );\r\n+    \r\n+        return (\r\n+          <Fragment>\r\n+            <Text style={styles.text}>Calendar with custom header title</Text>\r\n+            <Calendar\r\n+              style={styles.calendar}\r\n+              customHeaderTitle={CustomHeaderTitle}\r\n+              onPressArrowLeft={onPressArrowLeft}\r\n+              onPressArrowRight={onPressArrowRight}\r\n+            />\r\n+          </Fragment>\r\n+        );\r\n+      };\r\n+      const renderExamples = () => {\r\n+        return (\r\n+          <Fragment>\r\n+            {renderCalendarWithSelectableDate()}\r\n+            {renderCalendarWithWeekNumbers()}\r\n+            {renderCalendarWithMinAndMaxDates()}\r\n+            {renderCalendarWithCustomDay()}\r\n+            {renderCalendarWithInactiveDays()}\r\n+            {renderCalendarWithCustomHeaderTitle()}\r\n+            {renderCalendarWithCustomHeader()}\r\n+            {renderCalendarWithMarkedDatesAndHiddenArrows()}\r\n+            {renderCalendarWithMultiDotMarking()}\r\n+            {renderCalendarWithPeriodMarkingAndSpinner()}\r\n+            {renderCalendarWithPeriodMarkingAndDotMarking()}\r\n+            {renderCalendarWithMultiPeriodMarking()}\r\n+            {renderCalendarWithCustomMarkingType()}\r\n+          </Fragment>\r\n+        );\r\n+      };\r\n+\r\n+return (\r\n+    <ScrollView showsVerticalScrollIndicator={false}>\r\n+      {renderExamples()}\r\n+    </ScrollView>\r\n+  );\r\n+};\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647274805750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                 <Text style={styles.text}>Calendar with selectable date</Text>\r\n                 <Calendar\r\n                     enableSwipeMonths\r\n                     current={INITIAL_DATE}\r\n-                    style={styles.calendar}\r\n+                    style={{ marginBottom: 10}}\r\n                     onDayPress={onDayPress}\r\n                     markedDates={marked}\r\n                 />\r\n             </Fragment>\r\n@@ -68,18 +68,18 @@\n           [getNewSelectedDate]\r\n         );\r\n     \r\n         const CustomHeaderTitle = (\r\n-          <TouchableOpacity style={styles.customTitleContainer} onPress={() => console.warn('Tapped!')}>\r\n-            <Text style={styles.customTitle}>{selectedValue.getMonth() + 1}-{selectedValue.getFullYear()}</Text>\r\n+          <TouchableOpacity style={{flexDirection: 'row', alignItems: 'center',padding: 10}} onPress={() => console.warn('Tapped!')}>\r\n+            <Text style={{ fontSize: 16,fontWeight: 'bold',color: '#00BBF2'}}>{selectedValue.getMonth() + 1}-{selectedValue.getFullYear()}</Text>\r\n           </TouchableOpacity>\r\n         );\r\n     \r\n         return (\r\n           <Fragment>\r\n-            <Text style={styles.text}>Calendar with custom header title</Text>\r\n+            <Text style={{textAlign: 'center',padding: 10,backgroundColor: 'lightgrey',fontSize: 16}}>Calendar with custom header title</Text>\r\n             <Calendar\r\n-              style={styles.calendar}\r\n+              style={{marginBottom: 10}}\r\n               customHeaderTitle={CustomHeaderTitle}\r\n               onPressArrowLeft={onPressArrowLeft}\r\n               onPressArrowRight={onPressArrowRight}\r\n             />\r\n"
                },
                {
                    "date": 1647274872613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n     const renderCalendarWithSelectableDate = () => {\r\n         return (\r\n             <Fragment>\r\n-                <Text style={styles.text}>Calendar with selectable date</Text>\r\n+                <Text style={{textAlign: 'center',padding: 10,backgroundColor: 'lightgrey',fontSize: 16}}>Calendar with selectable date</Text>\r\n                 <Calendar\r\n                     enableSwipeMonths\r\n                     current={INITIAL_DATE}\r\n                     style={{ marginBottom: 10}}\r\n"
                },
                {
                    "date": 1647274918562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,20 +89,20 @@\n       const renderExamples = () => {\r\n         return (\r\n           <Fragment>\r\n             {renderCalendarWithSelectableDate()}\r\n-            {renderCalendarWithWeekNumbers()}\r\n-            {renderCalendarWithMinAndMaxDates()}\r\n-            {renderCalendarWithCustomDay()}\r\n-            {renderCalendarWithInactiveDays()}\r\n+            \r\n+            \r\n+            \r\n+            \r\n             {renderCalendarWithCustomHeaderTitle()}\r\n             {renderCalendarWithCustomHeader()}\r\n-            {renderCalendarWithMarkedDatesAndHiddenArrows()}\r\n-            {renderCalendarWithMultiDotMarking()}\r\n-            {renderCalendarWithPeriodMarkingAndSpinner()}\r\n-            {renderCalendarWithPeriodMarkingAndDotMarking()}\r\n-            {renderCalendarWithMultiPeriodMarking()}\r\n-            {renderCalendarWithCustomMarkingType()}\r\n+            \r\n+            \r\n+            \r\n+            \r\n+            \r\n+            \r\n           </Fragment>\r\n         );\r\n       };\r\n \r\n"
                },
                {
                    "date": 1647274979377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n             \r\n             \r\n             \r\n             {renderCalendarWithCustomHeaderTitle()}\r\n-            {renderCalendarWithCustomHeader()}\r\n+           \r\n             \r\n             \r\n             \r\n             \r\n"
                },
                {
                    "date": 1647275027967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,20 +89,10 @@\n       const renderExamples = () => {\r\n         return (\r\n           <Fragment>\r\n             {renderCalendarWithSelectableDate()}\r\n-            \r\n-            \r\n-            \r\n-            \r\n             {renderCalendarWithCustomHeaderTitle()}\r\n            \r\n-            \r\n-            \r\n-            \r\n-            \r\n-            \r\n-            \r\n           </Fragment>\r\n         );\r\n       };\r\n \r\n"
                },
                {
                    "date": 1647275088483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,63 +36,12 @@\n                 />\r\n             </Fragment>\r\n         );\r\n     }\r\n-    const renderCalendarWithCustomHeaderTitle = () => {\r\n-        const [selectedValue, setSelectedValue] = useState(new Date());\r\n-    \r\n-        const getNewSelectedDate = useCallback(\r\n-          (date, shouldAdd) => {\r\n-            const newMonth = new Date(date).getMonth();\r\n-            const month = shouldAdd ? newMonth + 1 : newMonth - 1;\r\n-            const newDate = new Date(selectedValue.setMonth(month));\r\n-            const newSelected = new Date(newDate.setDate(1));\r\n-            return newSelected;\r\n-          },\r\n-          [selectedValue]\r\n-        );\r\n-        const onPressArrowLeft = useCallback(\r\n-          (subtract, month) => {\r\n-            const newDate = getNewSelectedDate(month, false);\r\n-            setSelectedValue(newDate);\r\n-            subtract();\r\n-          },\r\n-          [getNewSelectedDate]\r\n-        );\r\n-      \r\n-        const onPressArrowRight = useCallback(\r\n-          (add, month) => {\r\n-            const newDate = getNewSelectedDate(month, true);\r\n-            setSelectedValue(newDate);\r\n-            add();\r\n-          },\r\n-          [getNewSelectedDate]\r\n-        );\r\n-    \r\n-        const CustomHeaderTitle = (\r\n-          <TouchableOpacity style={{flexDirection: 'row', alignItems: 'center',padding: 10}} onPress={() => console.warn('Tapped!')}>\r\n-            <Text style={{ fontSize: 16,fontWeight: 'bold',color: '#00BBF2'}}>{selectedValue.getMonth() + 1}-{selectedValue.getFullYear()}</Text>\r\n-          </TouchableOpacity>\r\n-        );\r\n-    \r\n-        return (\r\n-          <Fragment>\r\n-            <Text style={{textAlign: 'center',padding: 10,backgroundColor: 'lightgrey',fontSize: 16}}>Calendar with custom header title</Text>\r\n-            <Calendar\r\n-              style={{marginBottom: 10}}\r\n-              customHeaderTitle={CustomHeaderTitle}\r\n-              onPressArrowLeft={onPressArrowLeft}\r\n-              onPressArrowRight={onPressArrowRight}\r\n-            />\r\n-          </Fragment>\r\n-        );\r\n-      };\r\n       const renderExamples = () => {\r\n         return (\r\n           <Fragment>\r\n             {renderCalendarWithSelectableDate()}\r\n-            {renderCalendarWithCustomHeaderTitle()}\r\n-           \r\n           </Fragment>\r\n         );\r\n       };\r\n \r\n"
                },
                {
                    "date": 1647276864249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, Fragment, useCallback, useMemo } from 'react';\r\n-import { StyleSheet, View, ScrollView, Text, TouchableOpacity } from 'react-native';\r\n+import { View, Text } from 'react-native';\r\n import { Calendar, CalendarProps } from 'react-native-calendars';\r\n+import fonts from '../../utils/index'\r\n \r\n-\r\n const INITIAL_DATE = '2022-03-15';\r\n \r\n const ChoseDate = () => {\r\n     const [selected, setSelected] = useState(INITIAL_DATE);\r\n@@ -25,30 +25,34 @@\n \r\n     const renderCalendarWithSelectableDate = () => {\r\n         return (\r\n             <Fragment>\r\n-                <Text style={{textAlign: 'center',padding: 10,backgroundColor: 'lightgrey',fontSize: 16}}>Calendar with selectable date</Text>\r\n                 <Calendar\r\n                     enableSwipeMonths\r\n                     current={INITIAL_DATE}\r\n-                    style={{ marginBottom: 10}}\r\n+                    style={{ marginBottom: 10 }}\r\n                     onDayPress={onDayPress}\r\n                     markedDates={marked}\r\n                 />\r\n             </Fragment>\r\n         );\r\n     }\r\n-      const renderExamples = () => {\r\n-        return (\r\n-          <Fragment>\r\n-            {renderCalendarWithSelectableDate()}\r\n-          </Fragment>\r\n-        );\r\n-      };\r\n \r\n-return (\r\n-    <ScrollView showsVerticalScrollIndicator={false}>\r\n-      {renderExamples()}\r\n-    </ScrollView>\r\n-  );\r\n+    return (\r\n+        <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n+\r\n+\r\n+            <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n+                <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n+                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n+                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n+                    onPress={() => { }}\r\n+                >Xong</Text>\r\n+            </View>\r\n+              <View style={{flex: 1, backgroundColor:fonts.white, borderRadius: 15}}>\r\n+              {renderCalendarWithSelectableDate}\r\n+              </View>\r\n+            \r\n+        </View>\r\n+    );\r\n };\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647276906093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n import React, { useState, Fragment, useCallback, useMemo } from 'react';\r\n import { View, Text } from 'react-native';\r\n import { Calendar, CalendarProps } from 'react-native-calendars';\r\n import fonts from '../../utils/index'\r\n+import Icon from 'react-native-vector-icons/MaterialIcons'\r\n \r\n+\r\n const INITIAL_DATE = '2022-03-15';\r\n \r\n const ChoseDate = () => {\r\n     const [selected, setSelected] = useState(INITIAL_DATE);\r\n"
                },
                {
                    "date": 1647276953001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,18 +41,20 @@\n \r\n     return (\r\n         <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n \r\n-\r\n             <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n                 <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n                     onPress={() => { }}\r\n                 >Xong</Text>\r\n             </View>\r\n               <View style={{flex: 1, backgroundColor:fonts.white, borderRadius: 15}}>\r\n-              {renderCalendarWithSelectableDate}\r\n+                  <Fragment>\r\n+                  {renderCalendarWithSelectableDate}\r\n+                  </Fragment>\r\n+              \r\n               </View>\r\n             \r\n         </View>\r\n     );\r\n"
                },
                {
                    "date": 1647277041941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,26 +37,31 @@\n                 />\r\n             </Fragment>\r\n         );\r\n     }\r\n+    const renderExamples = () => {\r\n+        return (\r\n+            <Fragment>\r\n+                {renderCalendarWithSelectableDate}\r\n+            </Fragment>\r\n+        )\r\n+    }\r\n+    <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n \r\n-    return (\r\n-        <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n+        <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n+            <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n+            <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n+            <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n+                onPress={() => { }}\r\n+            >Xong</Text>\r\n+        </View>\r\n+        <View style={{ flex: 1, backgroundColor: fonts.white, borderRadius: 15 }}>\r\n+            <Fragment>\r\n+            {renderExamples()}\r\n+            </Fragment>\r\n \r\n-            <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n-                <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n-                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n-                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n-                    onPress={() => { }}\r\n-                >Xong</Text>\r\n-            </View>\r\n-              <View style={{flex: 1, backgroundColor:fonts.white, borderRadius: 15}}>\r\n-                  <Fragment>\r\n-                  {renderCalendarWithSelectableDate}\r\n-                  </Fragment>\r\n-              \r\n-              </View>\r\n-            \r\n         </View>\r\n+\r\n+    </View>\r\n     );\r\n };\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647277109641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n                 {renderCalendarWithSelectableDate}\r\n             </Fragment>\r\n         )\r\n     }\r\n+    return(\r\n     <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n \r\n         <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n             <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n@@ -61,7 +62,7 @@\n \r\n         </View>\r\n \r\n     </View>\r\n-    );\r\n+    )\r\n };\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647277245800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,25 +44,23 @@\n                 {renderCalendarWithSelectableDate}\r\n             </Fragment>\r\n         )\r\n     }\r\n-    return(\r\n-    <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n+    return (\r\n+        <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n+            <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n+                <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n+                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n+                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n+                    onPress={() => { }}\r\n+                >Xong</Text>\r\n+            </View>\r\n+            <View style={{ flex: 1, backgroundColor: fonts.white, borderRadius: 15 }}>\r\n+                \r\n+                    {renderExamples()}\r\n+                \r\n+            </View>\r\n \r\n-        <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n-            <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n-            <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n-            <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n-                onPress={() => { }}\r\n-            >Xong</Text>\r\n         </View>\r\n-        <View style={{ flex: 1, backgroundColor: fonts.white, borderRadius: 15 }}>\r\n-            <Fragment>\r\n-            {renderExamples()}\r\n-            </Fragment>\r\n-\r\n-        </View>\r\n-\r\n-    </View>\r\n     )\r\n };\r\n export default ChoseDate\n\\ No newline at end of file\n"
                },
                {
                    "date": 1647278040645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,17 +40,17 @@\n     }\r\n     const renderExamples = () => {\r\n         return (\r\n             <Fragment>\r\n-                {renderCalendarWithSelectableDate}\r\n+                {renderCalendarWithSelectableDate()}\r\n             </Fragment>\r\n         )\r\n     }\r\n     return (\r\n         <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n             <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n                 <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n-                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Tìm kiếm doanh nghiệp</Text>\r\n+                <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Chọn ngày thực hiện</Text>\r\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n                     onPress={() => { }}\r\n                 >Xong</Text>\r\n             </View>\r\n"
                },
                {
                    "date": 1647278069592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n                     onPress={() => { }}\r\n                 >Xong</Text>\r\n             </View>\r\n-            <View style={{ flex: 1, backgroundColor: fonts.white, borderRadius: 15 }}>\r\n+            <View style={{ backgroundColor: fonts.white, borderRadius: 15 }}>\r\n                 \r\n                     {renderExamples()}\r\n                 \r\n             </View>\r\n"
                },
                {
                    "date": 1647278079584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n             </Fragment>\r\n         )\r\n     }\r\n     return (\r\n-        <View style={{ flex: 1, backgroundColor: fonts.white }}>\r\n+        <View style={{ flex: 1, backgroundColor: fonts.default_color }}>\r\n             <View style={{ width: \"100%\", height: 50, backgroundColor: fonts.red, flexDirection: \"row\", alignItems: 'center', justifyContent: 'space-between', paddingHorizontal: 15 }}>\r\n                 <Icon name='arrow-back-ios' color={fonts.white} size={20} />\r\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white }}>Chọn ngày thực hiện</Text>\r\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n"
                },
                {
                    "date": 1647278137195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n                     onPress={() => { }}\r\n                 >Xong</Text>\r\n             </View>\r\n-            <View style={{ backgroundColor: fonts.white, borderRadius: 15 }}>\r\n+            <View style={{ backgroundColor: fonts.white, borderRadius: 15 , marginTop:10}}>\r\n                 \r\n                     {renderExamples()}\r\n                 \r\n             </View>\r\n"
                },
                {
                    "date": 1647278158076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n                     onPress={() => { }}\r\n                 >Xong</Text>\r\n             </View>\r\n-            <View style={{ backgroundColor: fonts.white, borderRadius: 15 , marginTop:10}}>\r\n+            <View style={{ backgroundColor: fonts.white, borderRadius: 15 , marginTop:10, padding: 7}}>\r\n                 \r\n                     {renderExamples()}\r\n                 \r\n             </View>\r\n"
                },
                {
                    "date": 1647278173275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n                 <Text style={{ fontFamily: fonts.fontSF, fontSize: fonts.fontMedium, color: fonts.white, fontWeight: '700' }}\r\n                     onPress={() => { }}\r\n                 >Xong</Text>\r\n             </View>\r\n-            <View style={{ backgroundColor: fonts.white, borderRadius: 15 , marginTop:10, padding: 7}}>\r\n+            <View style={{ backgroundColor: fonts.white, borderRadius: 15 , margin:10}}>\r\n                 \r\n                     {renderExamples()}\r\n                 \r\n             </View>\r\n"
                },
                {
                    "date": 1647278225699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n             <Fragment>\r\n                 <Calendar\r\n                     enableSwipeMonths\r\n                     current={INITIAL_DATE}\r\n-                    style={{ marginBottom: 10 }}\r\n+                    style={{ margin: 10 }}\r\n                     onDayPress={onDayPress}\r\n                     markedDates={marked}\r\n                 />\r\n             </Fragment>\r\n"
                }
            ],
            "date": 1647270559863,
            "name": "Commit-0",
            "content": "import React from 'react'\r\nimport { View } from 'react-native'\r\nimport fonts from '../../utils/index'\r\n\r\n\r\nconst ChoseDate = () => {\r\n    return (\r\n        <View style={{flex: 1, backgroundColor :fonts.default_color}}>\r\n\r\n        </View>\r\n    )\r\n}\r\nexport default ChoseDate"
        }
    ]
}